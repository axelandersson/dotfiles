#!/bin/bash

function tmp() {
    directory="/tmp"

    if [ -n "$TMPDIR" ]; then
        directory="$TMPDIR"
    elif [ -n "$TMP" ]; then
        directory="$TMP"
    elif [ -n "$TEMP" ]; then
        directory="$TEMP"
    fi

    user="unknown"

    if [ -n "$USER" ]; then
        user="$USER"
    elif [ -n "$LOGNAME" ]; then
        user="$LOGNAME"
    elif [ -n "$HOME" ]; then
        user=$(basename "$HOME")
    fi

    tmpdirectory="$directory/tmp_function_$user"

    if ! mkdir -p "$tmpdirectory" 2>/dev/null; then
        echo "$FUNCNAME: Could not create temporary directory"
        return
    fi

    if [ "$1" = "save" -o "$1" = "s" ]; then
        count="$#"

        if [ "$count" -gt 2 ]; then
            name="$2"
            files="${@:3}"

            if [ -e "$name" ]; then
                tmp_usage
                return
            fi
        elif [ "$count" -eq 2 ]; then
            name="$2"
            files="$2"
        else
            tmp_usage
            return
        fi

        archive="$tmpdirectory/$name"

        if [ -e "$archive" ]; then
            echo "$FUNCNAME: $name: Temporary file already exists"
            return
        fi

        if ! tar -c -z -f "$archive" $files 2>/dev/null; then
            echo "$FUNCNAME: Could not create temporary archive"
            return
        fi
    elif [ "$1" = "restore" -o "$1" = "r" ]; then
        name="$2"

        if [ -z "$name" ]; then
            tmp_usage
            return
        fi

        archive="$tmpdirectory/$name"

        if [ ! -e "$archive" ]; then
            echo "$FUNCNAME: $name: No such temporary file"
            return
        fi

        if ! tar -xzf "$archive"; then
            echo "$FUNCNAME: Could not restore temporary archive"
            return
        fi

        if ! rm "$archive"; then
            echo "$FUNCNAME: Could not delete temporary file"
            return
        fi
    elif [ "$1" = "delete" -o "$1" = "d" ]; then
        files="${@:2}"

        if [ -z "$files" ]; then
            tmp_usage
            return
        fi

        for i in ${@:2}; do
            archive="$tmpdirectory/$i"

            if [ -e "$archive" ]; then
                if ! rm "$archive" 2>/dev/null; then
                    echo "$FUNCNAME: $i: Could not delete temporary file"
                fi
            else
                echo "$FUNCNAME: $i: No such temporary file"
            fi
        done
    elif [ "$1" = "list" -o "$1" = "l" ]; then
        pattern="$2"
        
        if [ -n "$pattern" ]; then
            archives=$(ls "$tmpdirectory" | grepp "$pattern" | sort)
        else
            archives=$(ls "$tmpdirectory" | sort)
        fi

        todaydate=$(date "+%b %d")
 
        for i in $archives; do
            archive="$tmpdirectory/$i"

            if [ "$(uname -s)" = "Linux" ]; then
                modificationdate=$(date --reference "$archive" "+%b %d")
                modificationtime=$(date --reference "$archive" "+%H:%M")
            else
                modificationdate=$(stat -f "%Sm" -t "%b %d" "$archive")
                modificationtime=$(stat -f "%Sm" -t "%H:%M" "$archive")
            fi

            if [ "$modificationdate" = "$todaydate" ]; then
                modificationdate="Today"
            fi

            size=$(du -h "$archive" | cut -f1)

            printf "\e[1;33m%-18s\e[0;0m%s %s %s\n" "$i" "$size" "$modificationdate" "$modificationtime"
        done
    else
        tmp_usage
        return
    fi
}

function tmp_usage() {
    echo "tmp: Usage: [s|save] <name> <file> [<file> ...]"
    echo "            [d|delete] <name> [<name> ...]"
    echo "            [r|restore] <name> [<name> ...]"
    echo "            [l|list] [<pattern>]"
}
