#!/bin/bash

function help() {
    _help_print_label "Shell"
    _help_print_commands "resource" "lsalias" "lsenv" "lsfunction" "rmalias" "rmenv" "rmfunction"
    _help_print_newline

    _help_print_label "File"
    _help_print_commands "rename" "lsdump"
    _help_print_newline

    _help_print_label "Directory List"
    _help_print_commands "ll" "la"
    _help_print_newline

    _help_print_label "Directory Tree"
    _help_print_commands "fl" "fld" "flx"
    _help_print_newline

    _help_print_label "Directory Find"
    _help_print_commands "ff" "ffd" "ffx"
    _help_print_newline

    _help_print_label "Process"
    _help_print_commands "psv" "psvv" "psa" "psav" "psavv" "psg"
    _help_print_newline

    _help_print_label "Archive List"
    _help_print_commands "lsar"
    _help_print_newline

    _help_print_label "Archive Pack"
    _help_print_commands "tgz"
    _help_print_newline

    _help_print_label "Archive Unpack"
    _help_print_commands "untgz" "untbz" "untar"
    test -x "$(which unrar 2>/dev/null)" && _help_print_commands "unrar"
    _help_print_newline

    _help_print_label "Grep"
    _help_print_commands "grepi" "grepr" "grepri" "grepar" "grepcode"
    _help_print_newline

    _help_print_label "Sed"
    _help_print_commands "replace"
    _help_print_newline

    if [ -x "$(which jq 2>/dev/null)" ]; then
        _help_print_label "JSON"
        _help_print_commands "jq"
        _help_print_newline
    fi

    if [ "$(uname -s)" = "Darwin" ]; then
        _help_print_label "Mac OS X"
        _help_print_commands "console" "plxml" "pljson" "trash"
        _help_print_newline
    fi

    if [ -x "$(which hfsdata 2>/dev/null)" ]; then
        _help_print_label "HFS Write"
        _help_print_commands "setcomment" "setlabel" "settype" "setcreator" "sethidden" "setunhidden"
        _help_print_newline

        _help_print_label "HFS Read"
        _help_print_commands "lscomment" "lslabel" "lskind" "lstype" "lscreator"
        _help_print_newline
    fi

    for i in $(echo "$CDMAP" | perl -ne 'print join("\n", split(";"));' | sort); do
        shortcut=$(echo "$i" | cut -d ":" -f1)
        directory=$(echo "$i" | cut -d ":" -f2)

        _help_print_label "Directory"
        _help_print_directory "$shortcut" "$directory"
        _help_print_newline
    done

    _help_print_label "Git Remote"
    _help_print_git "u=pullall" "b=branch" "m=mergenoff" "p=pushall"
    _help_print_newline

    _help_print_label "Git Change"
    _help_print_git "a=stage" "aa=stageall" "r=unstage" "h=resethard" "c=checkin"
    _help_print_newline

    _help_print_label "Git Status"
    _help_print_git "s=status" "d=diff" "dr=diffraw" "ds=diffstaged" "dc=diffcommit"
    _help_print_newline

    _help_print_label "Git Log"
    _help_print_git "l=logshort" "ll=loglong" "lc=logcommit"
    _help_print_newline

    _help_print_label "Git Search"
    _help_print_git "wb=whichbranch"
    _help_print_newline

    _help_print_label "Git Config"
    _help_print_git "v=viconfig"
    _help_print_newline

    _help_print_label "Git Prompt"
    _help_print_git "*unstaged" "+staged" "<behind" ">ahead" "=sync"
    _help_print_newline
}

function _help_print_label() {
    printf "%-18s" "$1"
}

function _help_print_commands() {
    for i in "$@"; do
        printf "$cboldmag%s$cres " "$i"
    done
}

function _help_print_directory() {
    printf "$cgre\"%s\"$cres $cgre%s$cres" "$1" "$2"
}

function _help_print_newline() {
    printf "\n"
}

function _help_print_git() {
    for i in "$@"; do
        printf "$cblu%s$cres " "$i"
    done
}
