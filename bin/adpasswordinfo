#!/usr/bin/perl -w

use strict;
use CLI;

my $options = CLI::options("server|s=s", "domain|d=s", "username|u=s");

my $server = $options->{"server"} || $ENV{"AD_SERVER"};
my $domain = $options->{"domain"} || $ENV{"AD_DOMAIN"};
my $username = $options->{"username"} || $ENV{"AD_USERNAME"};

CLI::usage("[--server|-s <server>] [--domain|-d <domain>] [--username|-u <username>]") if $options->{"help"} || !$domain || !$username || !$server;

my $password = CLI::askwithoutecho("Password for $domain\\$username");

my $nowtimestamp = time();
my $changedtimestamp = adpasswordchangedtimestamp($server, $domain, $username, $password);
my $maxagetimeinterval = adpasswordmaxagetimeinterval($server, $domain, $username, $password);
my $expirestimestamp = $changedtimestamp + $maxagetimeinterval;
my $expirestimeinterval = $nowtimestamp - $expirestimestamp;
my $expirestimeintervalstring = adtimeintervalstring(abs($expirestimeinterval));

println "Password Changed:    " . CLI::formattedtime($changedtimestamp);

if($expirestimeinterval < 0) {
    println "Password Expires:    " . CLI::formattedtime($expirestimestamp);
    println "                     in $expirestimeintervalstring";
} else {
    println "Password Expired:    " . CLI::formattedtime($expirestimestamp);
    println "                     $expirestimeintervalstring ago";
}



sub adpasswordchangedtimestamp {
    my $server = shift;
    my $domain = shift;
    my $username = shift;
    my $password = shift;

    my $base = join(",", map { "dc=$_" } split(/\./, $server));
    my @output = CLI::run(["ldapsearch", "-x", "-y", "/dev/stdin", "-h", $server, "-D", "$domain\\$username", "-b", $base, "-s", "sub", "(sAMAccountName=$username)", "pwdLastSet"], { "rawinput" => $password, "assertonerror" => 1 });

    my $timestamp;

    foreach my $line (@output) {
        if($line =~ /^pwdLastSet: ([-\d]+?)$/) {
            $timestamp = int(($1 / 10000000) - 11644473600);

            last;
        }
    }

    CLI::assertdefined($timestamp, "Invalid output from \"ldapsearch\"");

    return $timestamp;
}

sub adpasswordmaxagetimeinterval {
    my $server = shift;
    my $domain = shift;
    my $username = shift;
    my $password = shift;

    my $base = join(",", map { "dc=$_" } split(/\./, $server));
    my @output = CLI::run(["ldapsearch", "-x", "-y", "/dev/stdin", "-h", $server, "-D", "$domain\\$username", "-b", $base, "-s", "base", "maxPwdAge"], { "rawinput" => $password, "assertonerror" => 1 });

    my $maxagetimeinterval;

    foreach my $line (@output) {
        if($line =~ /^maxPwdAge: ([-\d]+?)$/) {
            $maxagetimeinterval = int(($1 / 10000000) * -1);

            last;
        }
    }

    CLI::assertdefined($maxagetimeinterval, "Invalid output from \"ldapsearch\"");

    return $maxagetimeinterval;
}

sub adtimeintervalstring {
    my $timeinterval = shift;

    my $days = int($timeinterval / 86400);
    $timeinterval -= $days * 86400;
    my $hours = int($timeinterval / 3600);
    $timeinterval -= $hours * 3600;
    my $minutes = int($timeinterval / 60);
    $timeinterval -= $minutes * 60;
    my $seconds = $timeinterval;

    my @components;

    if($days > 0) {
        push(@components, "$days " . ($days == 1 ? "day" : "days"));
    }

    if($hours > 0) {
        push(@components, "$hours " . ($hours == 1 ? "hour" : "hours"));
    }

    if($minutes > 0) {
        push(@components, "$minutes " . ($minutes == 1 ? "minute" : "minutes"));
    }

    if($seconds > 0) {
        push(@components, "$seconds " . ($seconds == 1 ? "second" : "seconds"));
    }

    return join(", ", @components);
}
