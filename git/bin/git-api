#!/usr/bin/perl -w

use strict;
use CLI;
use CLI::Git;

my $command = shift @ARGV || "help";

my $name = "name";
my $skip = "skip";
my $commands = "commands";
my $gitalias = "gitalias";
my $function = "function";
my $argtype = "argtype";

my $any = "any";
my $commandoralias = "commandoralias";
my $anyfiles = "anyfiles";
my $untrackedfiles = "untrackedfiles";
my $trackedfiles = "trackedfiles";
my $trackedfileandbranch = "trackedfileandbranch";
my $commit = "commit";
my $branch = "branch";
my $logfilter = "logfilter";

my @sections = (
    { $name => "Internal",
      $skip => 1,
      $commands => [ { $name => "help",
                       $function => "api_help",
                       $argtype => $any },
                     { $name => "describe",
                       $function => "api_describe",
                       $argtype => $commandoralias },
                     { $name => "completion",
                       $function => "api_completion",
                       $argtype => $any }
                   ] },
    { $name => "Config",
      $commands => [ { $name => "viconfig",
                       $gitalias => "config --global --edit" }
                   ] },
    { $name => "Remote",
      $commands => [ { $name => "update",
                       $gitalias => "api-update" },
                     { $name => "push",
                       $gitalias => "push --set-upstream" }
                   ] },
    { $name => "Index",
      $commands => [ { $name => "status",
                       $gitalias => "status" },
                     { $name => "stage",
                       $gitalias => "add",
                       $argtype => $untrackedfiles },
                     { $name => "stage-all",
                       $gitalias => "add --all" },
                     { $name => "unstage",
                       $gitalias => "reset --quiet",
                       $argtype => $trackedfiles }
                   ] },
    { $name => "Local",
      $commands => [ { $name => "commit",
                       $gitalias => "commit --verbose" },
                     { $name => "discard",
                       $gitalias => "reset --hard" },
                     { $name => "discard-file",
                       $gitalias => "api-discard-file",
                       $argtype => $anyfiles },
                     { $name => "discard-committed",
                       $gitalias => "reset --hard origin" }
                   ] },
    { $name => "Log",
      $commands => [ { $name => "log",
                       $gitalias => "api-log --short",
                       $argtype => $logfilter },
                     { $name => "log-long",
                       $gitalias => "api-log --long",
                       $argtype => $logfilter },
                     { $name => "log-committed",
                       $gitalias => "api-log --short --git='origin..'" },
                     { $name => "log-long-committed",
                       $gitalias => "api-log --long --git='origin..'" },
                     { $name => "log-branch",
                       $gitalias => "api-log-branch" },
                     { $name => "log-graph",
                       $gitalias => "api-log-graph",
                       $argtype => $logfilter }
                   ] },
    { $name => "Diff",
      $commands => [ { $name => "diff",
                       $gitalias => "diff" },
                     { $name => "diff-raw",
                       $gitalias => "diff --color=never --no-textconv" },
                     { $name => "diff-staged",
                       $gitalias => "diff --staged" },
                     { $name => "diff-committed",
                       $gitalias => "diff origin..." }
                   ] },
    { $name => "Difftool",
      $commands => [ { $name => "difftool",
                       $gitalias => "difftool" },
                     { $name => "difftool-staged",
                       $gitalias => "difftool --staged" },
                     { $name => "difftool-committed",
                       $gitalias => "difftool origin...HEAD" }
                   ] },
    { $name => "Print",
      $commands => [ { $name => "print-commit",
                       $gitalias => "api-print-commit --short",
                       $argtype => $commit },
                     { $name => "print-commit-long",
                       $gitalias => "api-print-commit --long",
                       $argtype => $commit },
                     { $name => "print-file",
                       $gitalias => "api-print-file --normal",
                       $argtype => $trackedfileandbranch },
                     { $name => "print-file-raw",
                       $gitalias => "api-print-file --raw",
                       $argtype => $trackedfileandbranch },
                     { $name => "print-file-blame",
                       $gitalias => "api-print-file --blame",
                       $argtype => $trackedfileandbranch }
                   ] },
    { $name => "Branch",
      $commands => [ { $name => "branch",
                       $gitalias => "rev-parse --abbrev-ref HEAD" },
                     { $name => "branch-switch",
                       $gitalias => "checkout",
                       $argtype => $branch },
                     { $name => "branch-new",
                       $gitalias => "checkout --track -b",
                       $argtype => $branch },
                     { $name => "branch-commit",
                       $gitalias => "branch --list --all --contains",
                       $argtype => $commit }
                   ] },
    { $name => "Merge",
      $commands => [ { $name => "merge",
                       $gitalias => "merge --edit --no-ff",
                       $argtype => $branch },
                     { $name => "merge-origin",
                       $gitalias => "api-merge-origin",
                       $argtype => $branch },
                     { $name => "mergetool",
                       $gitalias => "mergetool",
                       $argtype => $branch },
                     { $name => "merge-revert",
                       $gitalias => "revert --edit",
                       $argtype => $commit },
                     { $name => "merge-cherrypick",
                       $gitalias => "cherry-pick --edit",
                       $argtype => $commit }
                   ] }
);

foreach my $sct (@sections) {
    foreach my $cmd (@{$sct->{$commands}}) {
        if($command eq $cmd->{$name}) {
            if($cmd->{$gitalias}) {
                CLI::run("git $cmd->{$gitalias} " . join(" ", @ARGV));

                exit(0);
            }
            elsif($cmd->{$function}) {
                eval("$cmd->{$function}();");

                exit(0);
            }
            else {
                CLI::assert_true(0, "Command \"$cmd->{$name}\" not handled");
            }
        }
    }
}

CLI::assert_true(0, "Command \"$command\" not found");



# commands

sub api_help {
    my $aliases = api_aliasesforcommands();

    foreach my $sct (@sections) {
        next if $sct->{$skip};

        print CLI::justifiedstring($sct->{$name}, 17);

        my $index = 0;

        foreach my $cmd (@{$sct->{$commands}}) {
            my $command = $cmd->{$name};
            my $alias = $aliases->{$command};

            print " ", CLI::coloredstring($alias, "blue"), "=", CLI::coloredstring($command, "blue");
        }

        print "\n";
    }
}

sub api_describe {
    my $argument = shift @ARGV;

    my $command;
    my $commandforalias = api_command_for_alias($argument);

    if($commandforalias) {
        println "$argument = alias \"$commandforalias\"";

        $command = $commandforalias;
    } else {
        my $aliasforcommand = api_alias_for_command($argument);

        if($aliasforcommand) {
            println "$aliasforcommand = alias \"$argument\"";
        }

        $command = $argument;
    }

    foreach my $sct (@sections) {
        foreach my $cmd (@{$sct->{$commands}}) {
            if($cmd->{$name} eq $command) {
                my $description;

                if($cmd->{$gitalias}) {
                    $description = "command \"git ";
                    $description .= $cmd->{$gitalias};
                    $description .= " <" . $cmd->{$argtype} . ">" if $cmd->{$argtype};
                    $description .= "\"";
                }
                elsif($cmd->{$function}) {
                    $description = "function ";
                    $description .= $cmd->{$function};
                    $description .= "(";
                    $description .= $cmd->{$argtype} if $cmd->{$argtype};
                    $description .= ")";
                }

                println "$command = $description";

                last;
            }
        }
    }
}

sub api_completion {
    my $argument = shift @ARGV || "commands";
    my @list;

    if($argument eq "commands") {
        foreach my $sct (@sections) {
            foreach my $cmd (@{$sct->{$commands}}) {
                push(@list, $cmd->{$name});
            }
        }
    }
    elsif($argument eq "commandforalias" ) {
        my $alias = shift @ARGV || "";
        my $command = api_command_for_alias($alias);

        push(@list, $command) if $command;
    }
    elsif($argument eq "type") {
        my $command = shift @ARGV || "";

        foreach my $sct (@sections) {
            foreach my $cmd (@{$sct->{$commands}}) {
                if($command eq $cmd->{$name}) {
                    push(@list, $cmd->{$argtype} || "none");
                    last;
                }
            }
        }
    }

    foreach my $item (sort @list) {
        println $item;
    }
}



# utilities

sub api_commandsforaliases {
    my $input = CLI::Git::aliases();
    my %output;

    foreach my $alias (keys %{$input}) {
        my $command = $input->{$alias};

        $command =~ s/^api //;

        $output{$alias} = $command;
    }

    return \%output;
}

sub api_aliasesforcommands {
    my $input = CLI::Git::aliases();
    my %output;

    foreach my $alias (keys %{$input}) {
        my $command = $input->{$alias};

        $command =~ s/^api //;

        $output{$command} = $alias;
    }

    return \%output;
}
